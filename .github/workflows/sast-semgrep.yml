name: Flutter Secure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  secure-pipeline:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------
      # 1. Checkout code
      # ------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------------------------------------------------
      # 2. Set up Flutter (version 3.27.0 → Dart 3.8.1)
      # ------------------------------------------------------------
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.0'

      # ------------------------------------------------------------
      # 3. Confirm Flutter & Dart versions
      # ------------------------------------------------------------
      - name: Check Flutter & Dart versions
        run: |
          flutter --version
          dart --version

      # ------------------------------------------------------------
      # 4. Install Flutter dependencies
      # ------------------------------------------------------------
      - name: Install dependencies
        run: flutter pub get

      # ------------------------------------------------------------
      # 5. Run Flutter analyzer & tests
      # ------------------------------------------------------------
      - name: Flutter analyze
        run: flutter analyze

      - name: Flutter tests
        run: flutter test --coverage

      # ============================================================
      # === 6. SAST (Semgrep) ====================================
      # ============================================================
      - name: Set up Python for Semgrep
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep SAST scan
        run: |
          mkdir -p semgrep-results
          semgrep ci --sarif --output semgrep-results/semgrep.sarif

      - name: Upload Semgrep SARIF to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results/semgrep.sarif

      - name: Upload Semgrep artifacts
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results/

      # ============================================================
      # === 7. Dependency scanning with Trivy ====================
      # ============================================================

      # --- Python dependencies scan ---
      - name: Trivy scan for Python deps
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-python.sarif'
          severity: 'CRITICAL,HIGH'

      # --- Docker image scan ---
      - name: Build Docker image for scanning
        run: docker build -t flutter-app .

      - name: Trivy scan Docker image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'flutter-app'
          format: 'sarif'
          output: 'trivy-docker.sarif'
          severity: 'CRITICAL,HIGH'

      # --- Upload Trivy results ---
      - name: Upload Trivy SARIF (Python)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-python.sarif

      - name: Upload Trivy SARIF (Docker)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-docker.sarif

      - name: Upload Trivy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-python.sarif
            trivy-docker.sarif

      # ============================================================
      # === 8. DAST (Dynamic Application Security Testing) ========
      # ============================================================
      - name: Run OWASP ZAP baseline scan (placeholder)
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-r zap-report.html'

      - name: Upload DAST report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: zap-report.html

      # ============================================================
      # === 9. Docker build & export ==============================
      # ============================================================
      - name: Build Docker image for deployment
        run: docker build -t flutter-app:latest .

      - name: Save Docker image as artifact
        run: docker save flutter-app:latest -o flutter-app.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: flutter-app.tar

      # ============================================================
      # === 10. Pipeline summary =================================
      # ============================================================
      - name: Summary
        run: echo "✅ All security checks, builds, and artifacts completed successfully."
