name: Flutter Secure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  secure-pipeline:
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------------
      # 1. Checkout the code from your repository
      # ------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------------------------------------------------
      # 2. Setup Flutter environment
      # ------------------------------------------------------------
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'   # Update to your version

      # ------------------------------------------------------------
      # 3. Flutter dependencies and tests
      # ------------------------------------------------------------
      - name: Install dependencies
        run: flutter pub get

      - name: Run Flutter analyzer (static analysis)
        run: flutter analyze

      - name: Run Flutter tests
        run: flutter test --coverage

      # ============================================================
      # === SAST (Static Application Security Testing) - Semgrep ===
      # ============================================================
      - name: Set up Python (required for Semgrep)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep SAST scan
        run: |
          mkdir -p semgrep-results
          semgrep ci --sarif --output semgrep-results/semgrep.sarif

      - name: Upload Semgrep SARIF results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results/semgrep.sarif

      - name: Upload Semgrep results as artifact (for ISO27001 audit)
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results/

      # ============================================================
      # === Dependency scanning (SCA) with Trivy ===================
      # ============================================================

      # --- Python dependencies scan (if any Python deps exist) ---
      - name: Run Trivy on Python dependencies
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-python.sarif'
          severity: 'CRITICAL,HIGH'

      # --- Docker image dependency scan ---
      - name: Build Docker image for scanning
        run: docker build -t flutter-app .

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'flutter-app'
          format: 'sarif'
          output: 'trivy-docker.sarif'
          severity: 'CRITICAL,HIGH'

      # --- Upload Trivy scan results ---
      - name: Upload Trivy SARIF (Python)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-python.sarif

      - name: Upload Trivy SARIF (Docker)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-docker.sarif

      - name: Upload Trivy artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: |
            trivy-python.sarif
            trivy-docker.sarif

      # ============================================================
      # === DAST (Dynamic Application Security Testing) ============
      # ============================================================

      # Placeholder: In practice, you’d deploy to a test env and scan with OWASP ZAP
      - name: Run basic OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8080'   # Adjust if your app runs in a container
          cmd_options: '-r zap-report.html'

      - name: Upload DAST report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: zap-report.html

      # ============================================================
      # === Docker build and export ================================
      # ============================================================

      - name: Build Docker image for deployment
        run: docker build -t flutter-app:latest .

      - name: Save Docker image as artifact
        run: docker save flutter-app:latest -o flutter-app.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: flutter-app.tar

      # ============================================================
      # === End of Pipeline =======================================
      # ============================================================

      - name: Summary
        run: echo "✅ All security checks and build steps completed successfully."
